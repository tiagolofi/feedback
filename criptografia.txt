import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.NoSuchAlgorithmException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.spec.PKCS8EncodedKeySpec;
import java.security.spec.X509EncodedKeySpec;
import java.util.Base64;

https://quarkus-faces-melloware-8a6a34c1.koyeb.app/ui/data/datatable/facets.xhtml?jfwid=3f3a9

public class KeyGenerator {

    public static void main(String[] args) throws NoSuchAlgorithmException, IOException {
        // Gerar o par de chaves
        KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
        keyGen.initialize(2048);
        KeyPair pair = keyGen.generateKeyPair();
        PrivateKey privateKey = pair.getPrivate();
        PublicKey publicKey = pair.getPublic();

        // Salvar a chave privada em um arquivo
        try (FileOutputStream fos = new FileOutputStream("privateKey.pem")) {
            PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(privateKey.getEncoded());
            fos.write(Base64.getEncoder().encode(spec.getEncoded()));
        }

        // Salvar a chave p√∫blica em um arquivo
        try (FileOutputStream fos = new FileOutputStream("publicKey.pem")) {
            X509EncodedKeySpec spec = new X509EncodedKeySpec(publicKey.getEncoded());
            fos.write(Base64.getEncoder().encode(spec.getEncoded()));
        }
    }
}

import io.smallrye.jwt.build.Jwt;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.PrivateKey;
import java.security.KeyFactory;
import java.security.spec.PKCS8EncodedKeySpec;
import java.util.Base64;

public class TokenGenerator {

    public String generateToken(String username) throws Exception {
        // Carregar a chave privada do arquivo
        String privateKeyContent = new String(Files.readAllBytes(Paths.get("privateKey.pem")))
            .replaceAll("\\n", "")
            .replace("-----BEGIN PRIVATE KEY-----", "")
            .replace("-----END PRIVATE KEY-----", "");

        byte[] keyBytes = Base64.getDecoder().decode(privateKeyContent);
        PKCS8EncodedKeySpec spec = new PKCS8EncodedKeySpec(keyBytes);
        KeyFactory kf = KeyFactory.getInstance("RSA");
        PrivateKey privateKey = kf.generatePrivate(spec);

        // Gerar o token JWT
        return Jwt.issuer("https://example.com/issuer")
                  .upn(username)
                  .groups("User")
                  .sign(privateKey);
    }
}

@Inject
JsonWebToken jwt;

@GET
@Path("/user-info")
public String getUserInfo() {
    return "User: " + jwt.getName() + ", Roles: " + jwt.getGroups();
}

@GET
@Path("/secure")
@RolesAllowed("user")
public String secureEndpoint() {
    return "This is a secure endpoint";
}
